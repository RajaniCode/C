/*
// Supports a simple iteration over a non-generic collection.
public interface IEnumerator
{
    // Gets the element in the collection at the current position of the enumerator.
    object? Current { get; } // .NET Core
    // object Current { get; } // .NET Framework 

    // Advances the enumerator to the next element of the collection.
    // Returns: true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
    bool MoveNext();  

    // Sets the enumerator to its initial position, which is before the first element in the collection.  
    // Exceptions: T:System.InvalidOperationException: The collection was modified after the enumerator was created.
    void Reset();
}

// Exposes an enumerator, which supports a simple iteration over a non-generic collection.
public interface IEnumerable
{
    // Returns an enumerator that iterates through a collection.
    IEnumerator GetEnumerator();
}
// String class implements IEnumerable along with other interfaces // Only in .NET Framework // IEnumerable<char> as part of other interfaces


// Supports a simple iteration over a generic collection.
public interface IEnumerator<out T> : IDisposable, IEnumerator
{
    // Gets the element in the collection at the current position of the enumerator.
    T Current { get; }
}

// Exposes the enumerator, which supports a simple iteration over a collection of a specified type.
public interface IEnumerable<out T> : IEnumerable
{
    // Returns an enumerator that iterates through the collection.
    IEnumerator<T> GetEnumerator();
}
*/