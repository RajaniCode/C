// C# 7

# Typical validation in constructor
public ClientService(
     IClientsRepository clientsRepository,
     IClientsNotifications clientsNotifications)
{
    if (clientsRepository == null)
    {
        throw new ArgumentNullException(nameof(clientsRepository));
    }
    if (clientsNotifications == null)
    {
        throw new ArgumentNullException(nameof(clientsNotifications));
    }

    this.clientsRepository = clientsRepository;
    this.clientsNotificator = clientsNotifications;
}
// Extract the validations to a class
public ClientService(
    IClientsRepository clientsRepository,
    IClientsNotifications clientsNotifications)
{
    Ensure.NotNull(clientsRepository, nameof(clientsRepository));
    Ensure.NotNull(clientsNotifications, nameof(clientsNotifications));

    this.clientsRepository = clientsRepository;
    this.clientsNotifications = clientsNotifications;
}
// C# 7  throw expressions
public ClientService(
    IClientsRepository clientsRepository,
    IClientsNotifications clientsNotifications)
{
    this.clientsRepository = clientsRepository ?? throw new ArgumentNullException(nameof(clientsRepository));
    this.clientsNotifications = clientsNotifications ?? throw new ArgumentNullException(nameof(clientsNotifications));
}

// Useful in property setters too
public string Property
{
    set
    {
        if (value == null)
        {
            throw new ArgumentNullException();
        }

        backingField = value;
    }
}
// can be
public string Property
{
    set
    {
        backingField = value ?? throw new ArgumentNullException();
    }
}
// or even (together with expression body â€“ IDE0027 C# Use expression body for accessors)
public string Property
{
    set => backingField = value ?? throw new ArgumentNullException();
}
// caution
public void NotifyClients(string message)
{
    if (message == null)
    {
        throw new ArgumentNullException(nameof(message));
    }
    var clients = clientsRepository.GetClientsToNotify(...);
    // some other long running operation, possibly with side effects

    var n = new Notification();
    n.Clients = clients;
    n.Message = message;

    // more code
}
// end up with
public void NotifyClients(string message)
{
    var clients = clientsRepository.GetClientsToNotify(...);
    // some long running operation, possibly with side effects
    var n = new Notification();
    n.Clients = clients;
    n.Message = message ?? throw new ArgumentNullException(nameof(message));

   // more code
}
// which is probably not written
// Throw expressions, used with caution, can make your constructors and property setters  a lot terser yet still expressive

// C# 8

using System;
 
public sealed class Address
{
    // Properties here
}
 
public sealed class Person
{
    public string Name { get; }
    public Address HomeAddress { get; }
 
    public Person(string name, Address homeAddress)
    {
        Name = name ??
            throw new ArgumentNullException(nameof(name));
        HomeAddress = homeAddress ??
            throw new ArgumentNullException(nameof(homeAddress));
    }
}
 
public sealed class Delivery
{
    public Person Recipient { get; }
    public Address Address { get; }
 
    public Delivery(Person recipient)
        : this(recipient, recipient?.HomeAddress!)
    {
    }
 
    public Delivery(Person recipient, Address address)
    {
        Recipient = recipient ??
            throw new ArgumentNullException(nameof(recipient));
        Address = address ??
            throw new ArgumentNullException(nameof(address));
    }
}

public JsonSerializableType(int favouriteInteger, string favouriteColour)
{
    FavouriteInteger = favouriteInteger;
    FavouriteColour = favouriteColour ?? throw new ArgumentNullException(nameof(favouriteColour));
}

protected override Task HandleRequirementAsync(AuthorizationHandlerContext context, ResourceOperationRequirement requirement)
{
    _ = context ?? throw new ArgumentNullException(nameof(context));

    _ = requirement ?? throw new ArgumentNullException(nameof(requirement));
}

public class Person
{
    public Person(string name) => Name = name ?? throw new ArgumentNullException(nameof(name));

    public string Name { get; }
}

public RGBColor FromRainbow(Rainbow colorBand) =>
    colorBand switch
    {
        Rainbow.Red    => new RGBColor(0xFF, 0x00, 0x00),
        Rainbow.Orange => new RGBColor(0xFF, 0x7F, 0x00),
        Rainbow.Yellow => new RGBColor(0xFF, 0xFF, 0x00),
        Rainbow.Green  => new RGBColor(0x00, 0xFF, 0x00),
        Rainbow.Blue   => new RGBColor(0x00, 0x00, 0xFF),
        Rainbow.Indigo => new RGBColor(0x4B, 0x00, 0x82),
        Rainbow.Violet => new RGBColor(0x94, 0x00, 0xD3),
        _              => throw new ArgumentException(message: "invalid enum value", paramName: nameof(colorBand)),
    };

public void CopyObject(SampleClass original)
{
    _ = original ?? throw new ArgumentException("Parameter cannot be null", nameof(original));
}

