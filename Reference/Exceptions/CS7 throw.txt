// CS 7

using System;
using System.Threading.Tasks;

// CS 7

class ClientService
{ 
    IClientsRepository clientsRepository;
    IClientsNotifications clientsNotifications;

    /*
    // Pre-CS 7 throw exception in constructor
    // Typical validation in constructor
    public ClientService(IClientsRepository clientsRepository, IClientsNotifications clientsNotifications)
    {
        if (clientsRepository == null)
        {
            throw new ArgumentNullException(nameof(clientsRepository));
        }

        if (clientsNotifications == null)
        {
            throw new ArgumentNullException(nameof(clientsNotifications));
        }

        this.clientsRepository = clientsRepository;
        this.clientsNotifications = clientsNotifications;
    }
    */

    // CS 7 throw exception in constructor
    public ClientService(IClientsRepository clientsRepository, IClientsNotifications clientsNotifications)
    {
       this.clientsRepository = clientsRepository ?? throw new ArgumentNullException(nameof(clientsRepository));
       this.clientsNotifications = clientsNotifications ?? throw new ArgumentNullException(nameof(clientsNotifications));
    }

    private string backingField;

    // Pre-CS 7 // throw exception in property
    public string PropertyPreCS7
    {
        set
        {
            if (value == null)
            {
                throw new ArgumentNullException();
            }

            backingField = value;
        }
    }

    // CS 7 // throw exception in property
    public string PropertyCS7
    {
        set
        {
            backingField = value ?? throw new ArgumentNullException();
        }
    }

    // CS 7 // throw exception in property
    public string PropertyCS7ExpressionBodied
    {
        set => backingField = value ?? throw new ArgumentNullException();
    }

    // CS 7 // throw exception in method
    // caution 
    public void NotifyClients(string message)
    {
        if (message == null)
        {
            throw new ArgumentNullException(nameof(message));
        }
        var clients = clientsRepository.GetClientsToNotify();
        // some other long running operation, possibly with side effects

        var n = new Notification();
        n.Clients = clients;
        n.Message = message;

        // more code
    }
    // end up with
    public void NotifyClients2(string message)
    {
        var clients = clientsRepository.GetClientsToNotify();
        // some long running operation, possibly with side effects
        var n = new Notification();
        n.Clients = clients;
        n.Message = message ?? throw new ArgumentNullException(nameof(message));

        // more code
    }
    // which is probably not written
    // Throw expressions, used with caution, can make your constructors and property setters  a lot terser yet still expressive

    // CS 7 // throw exception in method
    public void Method(Discard dis)
    {
        _ = dis ?? throw new ArgumentException("Parameter cannot be null", nameof(dis));
    }
}

public class Discard { }

interface IClientsNotifications { }

interface IClientsRepository : IClientsNotifications { object GetClientsToNotify(); }

class ClientsRepository : IClientsRepository { public object GetClientsToNotify() => new object(); }

internal class Notification
{
    public Notification() { }

    public object Clients { get; internal set; }
    public string Message { get; internal set; }
}


sealed class Address { }

sealed class Person
{
    public string Name { get; }

    public Address HomeAddress { get; }

    // CS 7 throw exception in constructor
    public Person(string name, Address homeAddress)
    {
        Name = name ?? throw new ArgumentNullException(nameof(name));

        HomeAddress = homeAddress ?? throw new ArgumentNullException(nameof(homeAddress));
    }
}

public class PersonCS7ExpressionBodied
{
    // CS 7 throw exception in constructor
    public PersonCS7ExpressionBodied(string name) => Name = name ?? throw new ArgumentNullException(nameof(name));

    public string Name { get; }
}

sealed class Delivery
{
    public Person Recipient { get; }

    public Address Address { get; }

    // CS 8 // nullable reference types
    // public Delivery(Person recipient) : this(recipient, recipient.HomeAddress!) { }

    // CS 7 throw exception in constructor
    public Delivery(Person recipient, Address address)
    {
        Recipient = recipient ?? throw new ArgumentNullException(nameof(recipient));

        Address = address ?? throw new ArgumentNullException(nameof(address));
    }

}

class Asynchronous
{
    // CS 7 // throw exception in async method
    public async Task<int> HandleRequirementAsync(AuthorizationHandlerContext context, ResourceOperationRequirement requirement)
    {
        _ = context ?? throw new ArgumentNullException(nameof(context));

        _ = requirement ?? throw new ArgumentNullException(nameof(requirement));

        return await default(Task<int>);
    }
}

class ResourceOperationRequirement { }

class AuthorizationHandlerContext { }

// CS 8 // throw // Switch expressions
class Patterns
{
    // Pattern matching enhancements:
    // Switch expressions
    // If your application defined an RGBColor type that is constructed from the R, G and B components, you could convert a Rainbow value to its RGB values using the following method containing a switch expression:
    private RGBColor FromRainbow(Rainbow colorBand) =>
    colorBand switch
    {
        Rainbow.Red => new RGBColor(0xFF, 0x00, 0x00),
        Rainbow.Orange => new RGBColor(0xFF, 0x7F, 0x00),
        Rainbow.Yellow => new RGBColor(0xFF, 0xFF, 0x00),
        Rainbow.Green => new RGBColor(0x00, 0xFF, 0x00),
        Rainbow.Blue => new RGBColor(0x00, 0x00, 0xFF),
        Rainbow.Indigo => new RGBColor(0x4B, 0x00, 0x82),
        Rainbow.Violet => new RGBColor(0x94, 0x00, 0xD3),
        _ => throw new ArgumentException(message: "invalid enum value", paramName: nameof(colorBand)),
    };
}

enum Rainbow
{
    Red,
    Orange,
    Yellow,
    Green,
    Blue,
    Indigo,
    Violet
}

class RGBColor
{
    public int R;
    public int G;
    public int B;

    public RGBColor(int R, int G, int B)
    {
        this.R = R;
        this.G = G;
        this.B = B;
    }
}