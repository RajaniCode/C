1.3 Void Return Type

Let's move our console announcement from the Main method into our Announce method. We'll need to make changes to Announce since it will no longer need to return a value.

Program.cs
using System;

public class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine("What is the name of your venue?");

        string venue = args[0]; // Sets the venue based on the command-line argument. We'll cover arrays in Level 3!

        Console.WriteLine(Announce(venue);
    }

    static string Announce(string venue)
    {
        return venue + " will have bands performing tonight.";
    }

}

1. First, remove Console.WriteLine from the bottom of the Main method and leave only the call to Announce(venue).

Answer
Program.cs
using System;

public class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine("What is the name of your venue?");

        string venue = args[0]; // Sets the venue based on the command-line argument. We'll cover arrays in Level 3!

        Announce(venue);
    }

    static string Announce(string venue)
    {
        return venue + " will have bands performing tonight.";
    }

}

2. Next, we need to change our return type for the Announce method so it does not return a value. Then replace the return statement in the Announce method to instead use a Console.WriteLine call with the existing concatenated string as its argument.

Answer
Program.cs
using System;

public class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine("What is the name of your venue?");

        string venue = args[0]; // Sets the venue based on the command-line argument. We'll cover arrays in Level 3!

        Announce(venue);
    }

    static void Announce(string venue)
    {
        Console.WriteLine(venue + " will have bands performing tonight.");
    }

}